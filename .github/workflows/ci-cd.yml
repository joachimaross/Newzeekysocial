name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.x'
          channel: 'stable'

      - name: Create environment file
        run: |
          cp .env.example .env.dev
          echo "Environment file created for CI"

      - name: Install dependencies
        run: flutter pub get

      - name: Verify the installation
        run: flutter doctor -v

      - name: Analyze project source
        run: flutter analyze --fatal-infos

      - name: Check formatting
        run: flutter format --dry-run --set-exit-if-changed lib/ test/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.x'
          channel: 'stable'

      - name: Create environment file
        run: |
          cp .env.example .env.dev
          echo "Environment file created for CI"

      - name: Install dependencies
        run: flutter pub get

      - name: Run unit tests
        run: flutter test --coverage --reporter github

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: [analyze, test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.x'
          channel: 'stable'

      - name: Create environment file
        run: |
          cp .env.example .env.dev
          echo "Environment file created for CI"

      - name: Install dependencies
        run: flutter pub get

      - name: Enable web
        run: flutter config --enable-web

      - name: Build web app
        run: flutter build web --release --dart-define=FLUTTER_ENV=production

      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/
          retention-days: 30

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: [analyze, test]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.x'
          channel: 'stable'

      - name: Create environment file
        run: |
          cp .env.example .env.dev
          echo "Environment file created for CI"

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release --dart-define=FLUTTER_ENV=production

      - name: Build App Bundle
        run: flutter build appbundle --release --dart-define=FLUTTER_ENV=production

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/
          retention-days: 30

      - name: Upload Bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle
          path: build/app/outputs/bundle/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-web]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting (Staging)
        run: |
          firebase deploy --only hosting:staging --project ${{ secrets.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-web, build-android]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting (Production)
        run: |
          firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [analyze, test, build-web, build-android]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.analyze.result == 'success' && needs.test.result == 'success' && needs.build-web.result == 'success' && needs.build-android.result == 'success' }}
        run: |
          echo "✅ All checks passed! Ready for deployment."
          
      - name: Notify failure
        if: ${{ needs.analyze.result == 'failure' || needs.test.result == 'failure' || needs.build-web.result == 'failure' || needs.build-android.result == 'failure' }}
        run: |
          echo "❌ Some checks failed. Please review the failed jobs."
          exit 1